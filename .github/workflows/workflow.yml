name: GitHub Actions
on:
  push:
    branches:
      - 'dev' 
   
   
jobs: 
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2          
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '14'
          cache: 'npm'         
          
      - name: Cache dependencies
        id: cache
        uses: actions/cache@v2
        with:
          path: node_modules
          key: npm-${{ hashFiles('package-lock.json') }}
          restore-keys: npm-         

      - name: Install dependencies
        if: steps.cache.outputs.cache-hit != 'true'
        run: npm ci --ignore-scripts       

#       - name: Run Lint Check
#         run: npm run lint:check

#       - name: Run Tests
#         run: npm run test:coverage
        
#       - name: SonarCloud Scan
#         uses: SonarSource/sonarcloud-github-action@v1.6
#         env:
#           GITHUB_TOKEN: ${{ secrets.GITHB_TOKEN }}  # Needed to get PR information, if any
#           SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          
#       - name: Sonar Build Breaker
#         uses: jkumar19/sonar-build-breaker@3.0.0
#         with:
#           sonar_url: "https://sonarcloud.io"
#           sonar_branch: ${{ github.ref_name }} #current branch name
#           sonar_token: ${{ secrets.SONAR_TOKEN }}
#           project_key: BancoIndustrial-Incubadora_${{ github.event.repository.name }}

  deploy:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    needs: test
    
    environment:
      name: dev
      url: http://d2x42y6he32avt.cloudfront.net
    steps:
      - uses: actions/checkout@v3
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '14'
          cache: 'npm'

      - name: Cache dependencies
        id: cache
        uses: actions/cache@v2
        with:
          path: node_modules
          key: npm-${{ hashFiles('package-lock.json') }}
          restore-keys: npm-         

      - name: Install dependencies
        if: steps.cache.outputs.cache-hit != 'true'
        run: npm ci --ignore-scripts     

      - run: npm run build
            
      - name: Configure AWS credentials with Role
        uses: aws-actions/configure-aws-credentials@v1
        with:
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/pipeline-agentesgt-dev
          aws-region: us-east-1         

      - name: create env file
        run: |
          touch .env
          echo NG_APP_HOST_URL= ${{ secrets.NG_APP_HOST_URL }} >> .env  

      - name: Copy files to Amazon S3
        run: |
          aws s3 sync dist/front-end-agentes-bancarios s3://${{ secrets.AWS_S3_BUCKET }} --delete
          
      - name: Invalidate CloudFront
        run: |
          aws cloudfront create-invalidation --distribution-id ${{ secrets.DISTRIBUTION }} --paths "/*"
          
      - name: Slack notification
        uses: rtCamp/action-slack-notify@v2.2.0
        env:
          SLACK_CHANNEL: monitoring-agentesgt
          SLACK_MESSAGE: 'ActualizaciÃ³n FrontEnd'
          SLACK_TITLE: 'Deploy'
          SLACK_USERNAME: 'Agentes Bancarios'
          SLACK_ICON: "https://d29fhpw069ctt2.cloudfront.net/icon/image/84560/preview.svg"
          SLACK_COLOR: '#228B22'
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK_URL }}
          MSG_MINIMAL: true          
          
          
  deploy_test:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    needs: deploy
    environment:
      name: test
      url: https://d15rz0l1ph9flo.cloudfront.net/
    steps:
      - uses: actions/checkout@v2
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '14'
          cache: 'npm'

      - name: Cache dependencies
        id: cache
        uses: actions/cache@v2
        with:
          path: node_modules
          key: npm-${{ hashFiles('package-lock.json') }}
          restore-keys: npm-         

      - name: Install dependencies
        if: steps.cache.outputs.cache-hit != 'true'
        run: npm ci --ignore-scripts         
        
      - name: create env file
        run: |
          touch .env
          echo NG_APP_HOST_URL=${{ secrets.NG_APP_HOST_URL }} >> .env        

      - run: npm run build
      
      - name: Configure AWS credentials with Role
        uses: aws-actions/configure-aws-credentials@v1
        with:
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/pipeline-agentesgt-test
          aws-region: us-east-1

      - name: Copy files to Amazon S3
        run: |
          aws s3 sync dist/front-end-agentes-bancarios s3://${{ secrets.AWS_S3_BUCKET }} --delete
          
      - name: Invalidate CloudFront
        run: |
          aws cloudfront create-invalidation --distribution-id ${{ secrets.DISTRIBUTION }} --paths "/*"          
      
